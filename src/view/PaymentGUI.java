package view;

import Application.DateHandler;
import Bricks.Member;
import Bricks.Membership;
import Bricks.Perk;
import database.MemberConnection;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Eric & Mikkel
 */
public class PaymentGUI extends javax.swing.JFrame {
    
    // this class needs to be able to manipulate the fields of these to panels. Therefore we have parametised them.
    CreateMemberGUI createMember;
    MemberScreenGUI memberScreen;
    /**
     * Creates new form PaymentWindow
     * @param createMember
     */
    public PaymentGUI(CreateMemberGUI createMember) {
        initComponents();
        this.createMember = createMember;
        this.setLocationRelativeTo(createMember);
        setToPayment();
    }

    /**
     *
     * @param memberScreen
     */
    public PaymentGUI(MemberScreenGUI memberScreen) {
        initComponents();
        this.memberScreen = memberScreen;
        this.setLocationRelativeTo(memberScreen);
        setToPayment();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        payedAmountTF = new javax.swing.JTextField();
        modtagetLabel = new javax.swing.JLabel();
        betalButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        toPayLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Betaling");
        setAlwaysOnTop(true);

        payedAmountTF.setText("0");

        modtagetLabel.setText("Modtaget beløb:");

        betalButton.setText("Betal");
        betalButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                betalButtonMouseReleased(evt);
            }
        });

        jLabel1.setText("Til betaling:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(betalButton)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(modtagetLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(payedAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toPayLabel)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(toPayLabel))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modtagetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payedAmountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(betalButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setToPayment()
    {
      
            if(memberScreen != null)
            {
                if(memberScreen.balanceTF.getText().equals(""))
                {
                    toPayLabel.setText(memberScreen.totalPriceTF.getText());
                }
                else
                {
                    toPayLabel.setText("" + (Math.round((Math.abs(Double.parseDouble(memberScreen.balanceTF.getText()))
                            + Double.parseDouble(memberScreen.totalPriceTF.getText())) * 100) / 100));     
                }
            }
            if(createMember != null)
            {
                if(createMember.balanceTF.getText().equals(""))
                {
                    toPayLabel.setText(createMember.totalPriceTF.getText());
                }
                else
                {
                    toPayLabel.setText("" + (Math.round((Math.abs(Double.parseDouble(memberScreen.balanceTF.getText())) 
                            + Double.parseDouble(memberScreen.totalPriceTF.getText())) * 100) / 100));     
                }
            }
    }        
    private void betalButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_betalButtonMouseReleased
        if(createMember != null)
        {
            double totalPrice = Double.parseDouble(createMember.totalPriceTF.getText());
            double receivedAmount = Double.parseDouble(payedAmountTF.getText().replaceAll(",", "."));

            double balanceTFValue;
            if(createMember.balanceTF.getText().equals("")) {
                balanceTFValue = 0;
            }else
            {
                balanceTFValue = Double.parseDouble(createMember.balanceTF.getText());
            }
            createMember.balanceTF.setText(""+ (int)(balanceTFValue - (totalPrice - receivedAmount)));

            this.dispose();
            

        }
        
        else if(memberScreen != null)
        {

            double totalPrice = Double.parseDouble(memberScreen.totalPriceTF.getText());
            double receivedAmount = Double.parseDouble(payedAmountTF.getText().replaceAll(",", "."));

            double balanceTFValue;
            if(memberScreen.balanceTF.getText().equals("")) {
                balanceTFValue = 0;
            }else{
                balanceTFValue = Double.parseDouble(memberScreen.balanceTF.getText());
            }

            memberScreen.balanceTF.setText(""+ (balanceTFValue - (totalPrice - receivedAmount)));
            MemberConnection memberHandler = new MemberConnection();
            Member member = memberHandler.searchMemberID(Integer.parseInt(memberScreen.memberIdTF.getText()));
            DateHandler dateHandler = new DateHandler();

            List<Perk> perkList = new ArrayList();

                if(memberScreen.poolsCB.isSelected()) {
                    perkList.add(memberHandler.getPerk(1));
                }
                if(memberScreen.groupTrainingCB.isSelected()) {
                    perkList.add(memberHandler.getPerk(2));
                }
                if(memberScreen.timeLimitCB.isSelected()) {
                    perkList.add(memberHandler.getPerk(3));
                }

                // Why does it need to be cast to an arraylist?
                member.setPerkList((ArrayList)perkList);
                member.setmembershipStartDate(dateHandler.convertDateFormatToAmerican(memberScreen.fromDateTF.getText()));
                member.setEndDate(dateHandler.convertDateFormatToAmerican(memberScreen.endDateTF.getText()));
                member.setMembership((Membership)memberScreen.membershipDropD.getSelectedItem());
                // Denne får stadig det tidligere saldo ind, da saldo først bliver rettet efter at der er trykket på knappen. 
                member.setBalance(Double.parseDouble(memberScreen.balanceTF.getText()));

                memberHandler.editMembership(member);
                
                memberScreen.totalPriceTF.setText("");
            this.dispose();
        }
    }//GEN-LAST:event_betalButtonMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton betalButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel modtagetLabel;
    private javax.swing.JTextField payedAmountTF;
    private javax.swing.JLabel toPayLabel;
    // End of variables declaration//GEN-END:variables
}
